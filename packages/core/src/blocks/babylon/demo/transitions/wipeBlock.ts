import type { ThinEngine } from "@babylonjs/core/Engines/thinEngine.js";
import {
    CustomShaderBlock,
    importCustomBlockDefinition,
    type BaseBlock,
    type ISerializedBlockV1,
    type SmartFilter,
    type SmartFilterDeserializer,
} from "@babylonjs/smart-filters";

// ************************************************************
// Note: this file is auto-generated, do not modify it directly
// ************************************************************

// It was generated by convertShaderIntoCustomBlockFile() from
// an annotated .glsl file. Modify the .glsl file to make changes
// to the shader. This file will get overwritten when the build
// is run or during a watch when the .glsl file is updated.

/**
 * Generates a block from an annotated GLSL file.
 * @param smartFilter - The smart filter to create the block for
 * @param _engine - The engine to use for creating blocks
 * @param _smartFilterDeserializer - The deserializer to use for deserializing blocks
 * @param serializedBlock - The serialized block to deserialize, if any
 * @returns - A CustomShaderBlock that implements the block described in the annotated GLSL file
 */
export function wipeBlockFactory(
    smartFilter: SmartFilter,
    _engine: ThinEngine,
    _smartFilterDeserializer: SmartFilterDeserializer,
    serializedBlock?: ISerializedBlockV1
): BaseBlock {
    const blockDefinition = importCustomBlockDefinition(annotatedGlsl);
    if (blockDefinition.format !== "shaderBlockDefinition") {
        throw new Error("Expected a serialized ShaderBlockDefinition");
    }
    return CustomShaderBlock.Create(smartFilter, serializedBlock?.name || "Wipe", blockDefinition);
}

const annotatedGlsl = "";
